## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above.If the inverse has already been calculated (and
## the matrix has not changed),then it should retrieve the inverse from the
## cache.
##CacheSolve will retrieve the inverse from the Cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getInverse()
if(!is.null(inv)){
massage("getting cached data")
return(inv)
}
mat<-x$get()
inv<-solve(mat, ...)
x$setInverse(inv)
inv
}
f<-matrix(1:4,2,2)
b<-makeCacheMatrix(f)
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above.If the inverse has already been calculated (and
## the matrix has not changed),then it should retrieve the inverse from the
## cache.
##CacheSolve will retrieve the inverse from the Cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getInverse()
if(!is.null(inv)){
massage("getting cached data")
return(inv)
}
mat<-x$get()
inv<-solve(mat, ...)
x$setInverse(inv)
inv
}
makeCacheMatrix(f)
b<-makeCacheMatrix(f)
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above.If the inverse has already been calculated (and
## the matrix has not changed),then it should retrieve the inverse from the
## cache.
##CacheSolve will retrieve the inverse from the Cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getInverse()
if(!is.null(inv)){
massage("getting cached data")
return(inv)
}
mat<-x$get()
inv<-solve(mat, ...)
x$setInverse(inv)
inv
}
b<-makeCacheMatrix(f)
b<-makeCacheMatrix(f)
list(set = set, get = get, setInverse = setInverse,
getInverse = getInverse)
setInverse<- function(Inverse)inv<<-Inverse      ##assign value of inv in parent environment
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above.If the inverse has already been calculated (and
## the matrix has not changed),then it should retrieve the inverse from the
## cache.
##CacheSolve will retrieve the inverse from the Cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getInverse()
if(!is.null(inv)){
massage("getting cached data")
return(inv)
}
mat<-x$get()
inv<-solve(mat, ...)
x$setInverse(inv)
inv
}
f<-matrix(1:4,2,2)
b<-makeCacheMatrix(f)
makeCacheMatrix(x=matrix()){
##define the arguments with default mode of "matrix"
inv<-NULL                                            ##initialize inv as NULL;will hold value of matrix inverse
set<-function(y){                                    ##define the set function to assign new
x<<-y                                         ##value of matrix in parent environment
inv<<-NULL                                      ##if there is a new matrix, reset inv NULL
}
get<-function()x                          ##define the get function
setInverse<- function(Inverse)inv<<-Inverse      ##assign value of inv in parent environment
getInverse<-function()inv                        ## get the value of inv where called
list(set = set, get = get, setInverse = setInverse,
getInverse = getInverse)
}
if(!is.null(inv)){
massage("getting cached data")
return
}
f<-matrix(1:4,2,2)
b<-makeCacheMatrix(f)
inv<<-NULL                                      ##if there is a new matrix, reset inv NULL
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above.If the inverse has already been calculated (and
## the matrix has not changed),then it should retrieve the inverse from the
## cache.
##CacheSolve will retrieve the inverse from the Cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getInverse()
if(!is.null(inv)){
massage("getting cached data")
return
}
mat<-x$get()
inv<-solve(mat, ...)
x$setInverse(inv)
inv
}
b<-makeCacheMatrix(f)
set<-function(y){                                    ##define the set function to assign new
x<<-y                                         ##value of matrix in parent environment
inv<<-NULL                                      ##if there is a new matrix, reset inv NULL
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above.If the inverse has already been calculated (and
## the matrix has not changed),then it should retrieve the inverse from the
## cache.
##CacheSolve will retrieve the inverse from the Cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<-x$getInverse()
if(!is.null(inv)){
massage("getting cached data")
return
}
mat<-x$get()
inv<-solve(mat, ...)
x$setInverse(inv)
inv
}
b<-makeCacheMatrix(f)
makeCacheMatrix<-function(x = matrix()){
##define the arguments with default mode of "matrix"
inv<-NULL                                            ##initialize inv as NULL;will hold value of matrix inverse
set<-function(y){                                    ##define the set function to assign new     }
x<<-y                                         ##value of matrix in parent environment
inv<<-NULL
}                                             ##if there is a new matrix, reset inv NULL }
get<-function()x                          ##define the get function
setInverse<- function(Inverse)inv<<-Inverse      ##assign value of inv in parent environment
getInverse<-function()inv                        ## get the value of inv where called
list(set = set, get = get, setInverse = setInverse,
getInverse = getInverse)
}
b<-makeCacheMatrix(f)
b$get()
cachSolve(b)
cacheSolve(b)
